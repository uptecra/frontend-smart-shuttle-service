"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";

interface Shuttle {
  id: string;
  service_name?: string;
  driver_name?: string;
  driver_phone?: string;
  morning_shift: string;
  evening_shift: string;
  capacity: number;
  map_url: string;
}

interface AddShuttleTabProps {
  setActiveTab?: (tab: string) => void;
}

export default function AddShuttleTab({ setActiveTab }: AddShuttleTabProps) {
  const [newShuttle, setNewShuttle] = useState<Partial<Shuttle>>({});
  const [isEditMode, setIsEditMode] = useState(false);
  const [autoGeneratedId, setAutoGeneratedId] = useState<string>("");
  const [capacityError, setCapacityError] = useState(false);

  // Calculate auto-generated ID for new shuttles
  useEffect(() => {
    if (isEditMode) return;

    const saved = localStorage.getItem("Shuttles");
    const shuttles: Shuttle[] = saved ? JSON.parse(saved) : [];
    const existingIds = shuttles
      .map((s) => Number.parseInt(s.id))
      .filter((id) => !isNaN(id));
    const maxId = existingIds.length > 0 ? Math.max(...existingIds) : 0;
    setAutoGeneratedId(String(maxId + 1));
  }, [isEditMode]);

  // Load shuttle data from URL hash params on mount and on hash changes
  useEffect(() => {
    if (typeof window === "undefined") return;

    const applyFromHash = () => {
      const raw = (window.location.hash || "").replace(/^#/, "");
      const [, queryString] = raw.split("?");

      // Reset form for new shuttle
      if (!queryString) {
        setNewShuttle({});
        setIsEditMode(false);
        return;
      }

      const params = new URLSearchParams(queryString);
      const editData = params.get("edit");

      // Reset form if no edit data
      if (!editData) {
        setNewShuttle({});
        setIsEditMode(false);
        return;
      }

      try {
        const shuttle = JSON.parse(
          decodeURIComponent(editData)
        ) as Partial<Shuttle>;
        // Ensure types are normalized
        const normalized: Partial<Shuttle> = {
          ...shuttle,
          id: shuttle.id ? String(shuttle.id) : "",
          capacity: shuttle.capacity ? Number(shuttle.capacity) : 40,
        };
        setNewShuttle(normalized);
        setIsEditMode(true);
      } catch (error) {
        console.error("Failed to parse shuttle data from hash:", error);
        setNewShuttle({});
        setIsEditMode(false);
      }
    };

    applyFromHash();
    window.addEventListener("hashchange", applyFromHash);
    return () => window.removeEventListener("hashchange", applyFromHash);
  }, []);

  const handleCancel = () => {
    setNewShuttle({});
    setCapacityError(false);
    setActiveTab?.("shuttles");
  };

  const handleCapacityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = Number.parseInt(e.target.value);
    if (!isNaN(value)) {
      setNewShuttle({ ...newShuttle, capacity: value });
    }
    // Clear error state when user starts typing
    if (capacityError && e.target.value.trim() !== "") {
      setCapacityError(false);
    }
  };

  const handleAdd = () => {
    if (!newShuttle?.capacity || newShuttle.capacity <= 0) {
      setCapacityError(true);
      toast.error("Please fill required field: Capacity");
      return;
    }
    setCapacityError(false);

    try {
      const saved = localStorage.getItem("Shuttles");
      const shuttles: Shuttle[] = saved ? JSON.parse(saved) : [];

      // Auto-generate ID for new shuttles
      let shuttleId: string;
      if (isEditMode) {
        shuttleId = String(newShuttle.id);
      } else {
        // Find the next available ID starting from 1
        const existingIds = shuttles
          .map((s) => Number.parseInt(s.id))
          .filter((id) => !isNaN(id));
        const maxId = existingIds.length > 0 ? Math.max(...existingIds) : 0;
        shuttleId = String(maxId + 1);
      }

      const shuttle: Shuttle = {
        id: shuttleId,
        service_name: newShuttle.service_name || "",
        driver_name: newShuttle.driver_name || "",
        driver_phone: newShuttle.driver_phone || "",
        morning_shift: newShuttle.morning_shift || "08:00",
        evening_shift: newShuttle.evening_shift || "18:00",
        capacity: newShuttle.capacity || 40,
        map_url: newShuttle.map_url || "",
      };

      let updated: Shuttle[];
      if (isEditMode) {
        // Update existing shuttle
        updated = shuttles.map((sh) => (sh.id === shuttle.id ? shuttle : sh));
      } else {
        // Add new shuttle
        updated = [...shuttles, shuttle];
      }

      localStorage.setItem("Shuttles", JSON.stringify(updated));
      // Verify write
      try {
        const check = localStorage.getItem("Shuttles");
        const parsed = check ? JSON.parse(check) : [];
        console.log(
          "shuttles saved count:",
          Array.isArray(parsed) ? parsed.length : 0
        );
      } catch {}
      if (typeof window !== "undefined") {
        window.dispatchEvent(new Event("shuttlesUpdated"));
      }
      toast.success(
        isEditMode ? "Updated successfully ðŸŽ‰" : "Added successfully ðŸŽ‰",
        {
          description: `${shuttle.service_name || "Shuttle"} has been ${
            isEditMode ? "updated" : "added to your list"
          }.`,
        }
      );
      setNewShuttle({});
      setIsEditMode(false);
      setCapacityError(false);
      setActiveTab?.("shuttles");
    } catch {
      toast.error("Failed to save shuttle");
    }
  };

  return (
    <div className="space-y-4">
      <div>
        <h2 className="text-2xl font-bold tracking-tight">
          {isEditMode ? "Edit Shuttle" : "Add Shuttle"}
        </h2>
        <p className="text-muted-foreground">
          {isEditMode
            ? "Update the shuttle details below."
            : "Enter the shuttle details below."}
        </p>
      </div>

      <Card>
        <CardContent>
          <div className="grid gap-4 py-2">
            {/* <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="id"
                className="sm:text-right text-left whitespace-nowrap"
              >
                ID{" "}
                {!isEditMode && (
                  <span className="text-xs text-muted-foreground">
                    (auto-generated)
                  </span>
                )}
                {isEditMode && (
                  <span className="text-xs text-muted-foreground">
                    (cannot be changed)
                  </span>
                )}
              </Label>
              <Input
                id="id"
                value={isEditMode ? newShuttle.id || "" : autoGeneratedId}
                onChange={(e) =>
                  setNewShuttle({ ...newShuttle, id: e.target.value })
                }
                className="col-span-5 w-full"
                required
                disabled={true}
              />
            </div> */}
            <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="service_name"
                className="sm:text-right text-left whitespace-nowrap"
              >
                Service Name
              </Label>
              <Input
                id="service_name"
                value={newShuttle.service_name || ""}
                onChange={(e) =>
                  setNewShuttle({ ...newShuttle, service_name: e.target.value })
                }
                className="col-span-5 w-full"
              />
            </div>
            <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="driver_name"
                className="sm:text-right text-left whitespace-nowrap"
              >
                Driver Name
              </Label>
              <Input
                id="driver_name"
                value={newShuttle.driver_name || ""}
                onChange={(e) =>
                  setNewShuttle({ ...newShuttle, driver_name: e.target.value })
                }
                className="col-span-5 w-full"
              />
            </div>
            <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="driver_phone"
                className="sm:text-right text-left whitespace-nowrap"
              >
                Driver Phone
              </Label>
              <Input
                id="driver_phone"
                value={newShuttle.driver_phone || ""}
                onChange={(e) =>
                  setNewShuttle({ ...newShuttle, driver_phone: e.target.value })
                }
                className="col-span-5 w-full"
              />
            </div>
            {/* <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="morning_shift"
                className="sm:text-right text-left whitespace-nowrap"
              >
                Morning Shift
              </Label>
              <Input
                id="morning_shift"
                type="time"
                value={newShuttle.morning_shift || ""}
                onChange={(e) =>
                  setNewShuttle({
                    ...newShuttle,
                    morning_shift: e.target.value,
                  })
                }
                className="col-span-5 w-full"
              />
            </div>
            <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="evening_shift"
                className="sm:text-right text-left whitespace-nowrap"
              >
                Evening Shift
              </Label>
              <Input
                id="evening_shift"
                type="time"
                value={newShuttle.evening_shift || ""}
                onChange={(e) =>
                  setNewShuttle({
                    ...newShuttle,
                    evening_shift: e.target.value,
                  })
                }
                className="col-span-5 w-full"
              />
            </div> */}
            <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="capacity"
                className="sm:text-right text-left whitespace-nowrap"
              >
                Capacity
              </Label>
              <Input
                id="capacity"
                type="number"
                value={newShuttle.capacity || ""}
                onChange={handleCapacityChange}
                className={`col-span-5 w-full ${
                  capacityError ? "border-red-500 focus:border-red-500" : ""
                }`}
                required
              />
            </div>
            {/* <div className="grid grid-cols-6 items-center gap-2 sm:gap-3">
              <Label
                htmlFor="map_url"
                className="sm:text-right text-left whitespace-nowrap"
              >
                Map URL
              </Label>
              <Input
                id="map_url"
                value={newShuttle.map_url || ""}
                onChange={(e) =>
                  setNewShuttle({ ...newShuttle, map_url: e.target.value })
                }
                className="col-span-5 w-full"
              />
            </div> */}

            <div className="grid grid-cols-6 items-center">
              <div></div>
              <div className="col-span-5">
                <div className="flex justify-end gap-2">
                  <Button
                    variant="outline"
                    type="button"
                    onClick={handleCancel}
                  >
                    Cancel
                  </Button>
                  <Button onClick={handleAdd}>
                    {isEditMode ? "Update Shuttle" : "Add Shuttle"}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
